// <auto-generated />
using System;
using GrossMarketApp.Data.Concrete.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GrossMarketApp.Data.Migrations
{
    [DbContext(typeof(GrossMarketContext))]
    partial class GrossMarketContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("GrossMarketApp.Core.Concrete.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Yağ Ürünleri",
                            CreatedDate = new DateTime(2020, 12, 27, 19, 37, 43, 473, DateTimeKind.Local).AddTicks(2237),
                            ModifiedDate = new DateTime(2020, 12, 27, 19, 37, 43, 473, DateTimeKind.Local).AddTicks(3297),
                            Note = "Sıvı ve Katı Yağ Kategorisi"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Kasap Ürünleri",
                            CreatedDate = new DateTime(2020, 12, 27, 19, 37, 43, 473, DateTimeKind.Local).AddTicks(4358),
                            ModifiedDate = new DateTime(2020, 12, 27, 19, 37, 43, 473, DateTimeKind.Local).AddTicks(4361),
                            Note = "Kırmızı ve Beyaz Et Kategorisi"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Manav Ürünleri",
                            CreatedDate = new DateTime(2020, 12, 27, 19, 37, 43, 473, DateTimeKind.Local).AddTicks(4370),
                            ModifiedDate = new DateTime(2020, 12, 27, 19, 37, 43, 473, DateTimeKind.Local).AddTicks(4372),
                            Note = "Meyve ve Sebze Ürünleri"
                        });
                });

            modelBuilder.Entity("GrossMarketApp.Core.Concrete.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmployeeAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmployeeAge")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("EmployeeJob")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("EmployeePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal>("EmployeeSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsContinuesToWork")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeAddress = "Ramiz Mahallesi No:609 Sındırgı, Balıkesir",
                            EmployeeAge = 24,
                            EmployeeJob = "Kasiyer",
                            EmployeeName = "İsmail Çakır",
                            EmployeePhoneNumber = "+908512730226",
                            EmployeeSalary = 2600m,
                            IsContinuesToWork = true,
                            IsFired = false,
                            IsHired = true
                        },
                        new
                        {
                            Id = 2,
                            EmployeeAddress = "Dolgun Caddesi No:394 Ağaçören, Aksaray",
                            EmployeeAge = 41,
                            EmployeeJob = "Manav",
                            EmployeeName = "Ezgi Bulut",
                            EmployeePhoneNumber = "+908511660275",
                            EmployeeSalary = 2300m,
                            IsContinuesToWork = true,
                            IsFired = false,
                            IsHired = true
                        },
                        new
                        {
                            Id = 3,
                            EmployeeAddress = "Buse Mahallesi No:129 Türkeli, Sinop",
                            EmployeeAge = 34,
                            EmployeeJob = "Kasap",
                            EmployeeName = "Hasan Köse",
                            EmployeePhoneNumber = "+908512897057",
                            EmployeeSalary = 3100m,
                            IsContinuesToWork = true,
                            IsFired = false,
                            IsHired = true
                        });
                });

            modelBuilder.Entity("GrossMarketApp.Core.Concrete.Entities.MemberCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberCustomerAge")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("MemberCustomerName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("MemberCustomerPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("MemberCustomers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 12, 27, 19, 37, 43, 479, DateTimeKind.Local).AddTicks(8520),
                            MemberCustomerAge = 22,
                            MemberCustomerName = "Çiğdem Erdoğan",
                            MemberCustomerPhoneNumber = "+908516342272",
                            ModifiedDate = new DateTime(2020, 12, 27, 19, 37, 43, 479, DateTimeKind.Local).AddTicks(8531),
                            Note = "Yeni müşteri, üyelik kartı satın aldı."
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 12, 27, 19, 37, 43, 479, DateTimeKind.Local).AddTicks(8541),
                            MemberCustomerAge = 32,
                            MemberCustomerName = "Nurcan Arslan",
                            MemberCustomerPhoneNumber = "+908513277329",
                            ModifiedDate = new DateTime(2020, 12, 27, 19, 37, 43, 479, DateTimeKind.Local).AddTicks(8543),
                            Note = "Yeni müşteri, üyelik kartı satın aldı."
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2020, 12, 27, 19, 37, 43, 479, DateTimeKind.Local).AddTicks(8551),
                            MemberCustomerAge = 48,
                            MemberCustomerName = "Bayram Köse",
                            MemberCustomerPhoneNumber = "+908514856593",
                            ModifiedDate = new DateTime(2020, 12, 27, 19, 37, 43, 479, DateTimeKind.Local).AddTicks(8553),
                            Note = "Yeni müşteri, üyelik kartı satın aldı."
                        });
                });

            modelBuilder.Entity("GrossMarketApp.Core.Concrete.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("BarcodeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BarcodeNumber = new Guid("6ed794db-5a77-4076-afb8-9e796c170b34"),
                            CategoryId = 1,
                            CreatedDate = new DateTime(2020, 12, 27, 19, 37, 43, 477, DateTimeKind.Local).AddTicks(5811),
                            ExpiryDate = new DateTime(2021, 12, 27, 19, 37, 43, 477, DateTimeKind.Local).AddTicks(4825),
                            ModifiedDate = new DateTime(2020, 12, 27, 19, 37, 43, 477, DateTimeKind.Local).AddTicks(5848),
                            Note = "Süzme zeytin yağı 1 litrelik şişe",
                            Price = 60m,
                            ProductName = "Zeytin Yağı 1lt",
                            ProductionDate = new DateTime(2020, 10, 28, 19, 37, 43, 477, DateTimeKind.Local).AddTicks(3774),
                            Stock = 28,
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            BarcodeNumber = new Guid("502840ef-abfd-46b4-baff-f9192879eb64"),
                            CategoryId = 2,
                            CreatedDate = new DateTime(2020, 12, 27, 19, 37, 43, 477, DateTimeKind.Local).AddTicks(5890),
                            ExpiryDate = new DateTime(2021, 12, 27, 19, 37, 43, 477, DateTimeKind.Local).AddTicks(5887),
                            ModifiedDate = new DateTime(2020, 12, 27, 19, 37, 43, 477, DateTimeKind.Local).AddTicks(5892),
                            Note = "1Kg dana eti",
                            Price = 55m,
                            ProductName = "Dana Eti",
                            ProductionDate = new DateTime(2020, 10, 28, 19, 37, 43, 477, DateTimeKind.Local).AddTicks(5882),
                            Stock = 78,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 3,
                            BarcodeNumber = new Guid("0ca7c4f2-77bc-4da5-ac66-9d5d074e7f26"),
                            CategoryId = 3,
                            CreatedDate = new DateTime(2020, 12, 27, 19, 37, 43, 477, DateTimeKind.Local).AddTicks(5907),
                            ExpiryDate = new DateTime(2021, 12, 27, 19, 37, 43, 477, DateTimeKind.Local).AddTicks(5905),
                            ModifiedDate = new DateTime(2020, 12, 27, 19, 37, 43, 477, DateTimeKind.Local).AddTicks(5909),
                            Note = "1Kg salkım ihraç domates",
                            Price = 11m,
                            ProductName = "Salkım Domates",
                            ProductionDate = new DateTime(2020, 10, 28, 19, 37, 43, 477, DateTimeKind.Local).AddTicks(5902),
                            Stock = 120,
                            SupplierId = 3
                        });
                });

            modelBuilder.Entity("GrossMarketApp.Core.Concrete.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SupplierEmailAddress")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("SupplierPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 12, 27, 19, 37, 43, 478, DateTimeKind.Local).AddTicks(8344),
                            ModifiedDate = new DateTime(2020, 12, 27, 19, 37, 43, 478, DateTimeKind.Local).AddTicks(8355),
                            Note = "Yiyecek ve içecek tedarikçisi",
                            SupplierAddress = "Ayfer Caddesi No:656 Kurşunlu, Çankırı",
                            SupplierEmailAddress = "info@mail.com",
                            SupplierName = "Destek Gıda",
                            SupplierPhoneNumber = "+908515083726"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 12, 27, 19, 37, 43, 478, DateTimeKind.Local).AddTicks(8377),
                            ModifiedDate = new DateTime(2020, 12, 27, 19, 37, 43, 478, DateTimeKind.Local).AddTicks(8379),
                            Note = "Yiyecek ve içecek tedarikçisi",
                            SupplierAddress = "Adnan Menderes Bulvarı No:136 Görele, Giresun",
                            SupplierEmailAddress = "info@mail.com",
                            SupplierName = "Besa Gıda",
                            SupplierPhoneNumber = "+908512279812"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2020, 12, 27, 19, 37, 43, 478, DateTimeKind.Local).AddTicks(8388),
                            ModifiedDate = new DateTime(2020, 12, 27, 19, 37, 43, 478, DateTimeKind.Local).AddTicks(8390),
                            Note = "Yiyecek ve içecek tedarikçisi",
                            SupplierAddress = "Kaçkar Bulvarı No:800 Palu, Elazığ",
                            SupplierEmailAddress = "info@mail.com",
                            SupplierName = "Öz Trakya Gıda",
                            SupplierPhoneNumber = "+908516990496"
                        });
                });

            modelBuilder.Entity("GrossMarketApp.Core.Concrete.Entities.Product", b =>
                {
                    b.HasOne("GrossMarketApp.Core.Concrete.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrossMarketApp.Core.Concrete.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("GrossMarketApp.Core.Concrete.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GrossMarketApp.Core.Concrete.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
